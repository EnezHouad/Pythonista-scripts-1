'''
A very simple drawing 'app' that demonstrates
custom views and saving images to the camera roll.
'''

import ui
import photos
import console
from objc_util import *

def OMColorPickerViewController():
	v = ui.View()
	v.rgb = None
	vc = ObjCInstance(v)
	colorpicker = ObjCClass('OMColorPickerViewController').new().autorelease()
	clview = colorpicker.view()
	v.frame = (0,0,512,960)
	vc.addSubview_(clview)
	done_button = ui.ButtonItem(title='ok')
	def tapped(sender):
		cl = colorpicker.color()
		v.rgb = (cl.red(),cl.green(),cl.blue())
		v.close()
	done_button.action = tapped
	v.right_button_items = [done_button]
	v.rgb = None
	v.present('sheet')
	v.wait_modal()
	return v.rgb 	


# The PathView class is responsible for tracking
# touches and drawing the current stroke.
# It is used by SketchView.

class PathView (ui.View):
	def __init__(self, frame):
		self.frame = frame
		self.flex = 'WH'
		self.path = None
		self.action = None
	
	def touch_began(self, touch):
		x, y = touch.location
		self.path = ui.Path()
		self.path.line_width = self.main.path_width
		self.path.line_join_style = ui.LINE_JOIN_ROUND
		self.path.line_cap_style = ui.LINE_CAP_ROUND
		self.path.move_to(x, y)
	
	def touch_moved(self, touch):
		x, y = touch.location
		self.path.line_to(x, y)
		self.set_needs_display()
	
	def touch_ended(self, touch):
		# Send the current path to the SketchView:
		if callable(self.action):
			self.action(self)
		# Clear the view (the path has now been rendered
		# into the SketchView's image view):
		self.path = None
		self.set_needs_display()
	
	def draw(self):
		if self.path:
			ui.set_color(self.main.path_color)
			self.path.stroke()

# The main SketchView contains a PathView for the current
# line and an ImageView for rendering completed strokes.
# It also manages the 'Clear' and 'Save' ButtonItems that
# are shown in the title bar.

class SketchView (ui.View):
	def __init__(self, width=1024, height=1024):
		self.bg_color = 'white'
		self.path_color = 'blue'
		iv = ui.ImageView(frame=(0, 0, width, height))
		pv = PathView(frame=self.bounds)
		pv.action = self.path_action
		pv.main = self
		self.add_subview(iv)
		self.add_subview(pv)
		save_button = ui.ButtonItem()
		save_button.title = 'Save Image'
		save_button.action = self.save_action
		clear_button = ui.ButtonItem()
		clear_button.title = 'Clear'
		clear_button.tint_color = 'red'
		clear_button.action = self.clear_action
		color_button = ui.ButtonItem()
		color_button.image = ui.Image.named('emj:Artist_Palette').with_rendering_mode(ui.RENDERING_MODE_ORIGINAL)
		color_button.action = self.color_action
		self.path_color = 'blue'
		width_button = ui.ButtonItem()
		width_button.title = 'width'
		width_button.tint_color = 'blue'
		width_button.action = self.width_action
		self.right_button_items = [save_button, clear_button, color_button, width_button]
		self.path_width = 8.0
		self.image_view = iv
		
	def width_action(self,sender):
		sl = ui.Slider()
		sl.frame = (0,0,200,100)
		def sl_action(sender):
			sender['l'].height = 1+10*sender.value
		sl.action = sl_action
		l = ui.Label(name='l')
		sl.value = (self.path_width-1)/10
		h = self.path_width
		l.frame = (5,80,190,h)
		sl.background_color = 'white'
		l.background_color = self.path_color
		if l.background_color == sl.background_color:
			l.border_width = 1
			l.border_color = 'lightgray'
		l.background_color = self.path_color
		sl.add_subview(l)
		sl.present('sheet',hide_title_bar=True)
		sl.wait_modal()
		self.path_width = 1+10*sl.value
		
	def color_action(self,sender):	
		rgb = OMColorPickerViewController()					
		self.path_color = rgb
	
	def path_action(self, sender):
		path = sender.path
		old_img = self.image_view.image
		width, height = self.image_view.width, self.image_view.height
		with ui.ImageContext(width, height) as ctx:
			if old_img:
				old_img.draw()
			ui.set_color(self.path_color)
			path.stroke()
			self.image_view.image = ctx.get_image()
	
	def clear_action(self, sender):
		self.image_view.image = None
	
	def save_action(self, sender):
		if self.image_view.image:
			# We draw a new image here, so that it has the current
			# orientation (the canvas is quadratic).
			with ui.ImageContext(self.width, self.height) as ctx:
				self.image_view.image.draw()
				img = ctx.get_image()
				photos.save_image(img)
				console.hud_alert('Saved')
		else:
			console.hud_alert('No Image', 'error')
	
# We use a square canvas, so that the same image
# can be used in portrait and landscape orientation.
w, h = ui.get_screen_size()
canvas_size = max(w, h)

sv = SketchView(canvas_size, canvas_size)
sv.name = 'Sketch'
sv.present('fullscreen')
